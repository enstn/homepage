<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neural Network Scroll Animation</title>
    <style>
        body {
            margin: 0;
            overflow-x: hidden;
            background: #000000;
            height: 500vh;
        }

        #canvas-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            background: #000000;
        }

        canvas {
            display: block;
            background: #000000;
        }

        .scroll-indicator {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            color: white;
            font-family: Arial, sans-serif;
            opacity: 0.7;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 0.7; }
            50% { opacity: 0.3; }
            100% { opacity: 0.7; }
        }
    </style>
</head>
<body>
    <div id="canvas-container">
        <canvas id="networkCanvas"></canvas>
    </div>
    <div class="scroll-indicator">Scroll to explore</div>

    <script>
        const canvas = document.getElementById('networkCanvas');
        const ctx = canvas.getContext('2d');
        let isScrolling = false;
        let scrollTimeout;

        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }
        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);

        class Particle {
            constructor() {
                this.reset();
                this.isGithub = false; // Initialize GitHub flag
            }

            reset() {
                this.x = (Math.random() - 0.5) * canvas.width * 3;
                this.y = (Math.random() - 0.5) * canvas.height * 3;
                this.z = Math.random() * 2000;
                this.radius = Math.random() * 2 + 1;
                this.brightness = Math.random() * 0.5 + 0.5;
                this.color = `rgba(255, 255, 255, ${this.brightness})`;
            }

            draw(x2d, y2d, scale, alpha) {
                const r = this.radius * scale;
                
                // Create glow effect
                const gradient = ctx.createRadialGradient(x2d, y2d, 0, x2d, y2d, r * 2);
                
                if (this.isGithub) {
                    // Special colors for GitHub node
                    gradient.addColorStop(0, `rgba(100, 200, 255, ${alpha})`);
                    gradient.addColorStop(0.4, `rgba(100, 200, 255, ${alpha * 0.6})`);
                    gradient.addColorStop(1, `rgba(100, 200, 255, 0)`);
                } else {
                    gradient.addColorStop(0, `rgba(255, 255, 255, ${alpha})`);
                    gradient.addColorStop(0.4, `rgba(255, 255, 255, ${alpha * 0.6})`);
                    gradient.addColorStop(1, `rgba(255, 255, 255, 0)`);
                }

                // Draw glowing particle
                ctx.beginPath();
                ctx.fillStyle = gradient;
                ctx.arc(x2d, y2d, r * 2, 0, Math.PI * 2);
                ctx.fill();

                // Draw core
                ctx.beginPath();
                ctx.fillStyle = this.isGithub ? `rgba(100, 200, 255, ${alpha})` : `rgba(255, 255, 255, ${alpha})`;
                ctx.arc(x2d, y2d, r, 0, Math.PI * 2);
                ctx.fill();

                // Add special marking for GitHub node
                if (this.isGithub) {
                    ctx.beginPath();
                    ctx.strokeStyle = `rgba(100, 200, 255, ${alpha})`;
                    ctx.lineWidth = 2;
                    ctx.arc(x2d, y2d, r * 1.5, 0, Math.PI * 2);
                    ctx.stroke();
                }
            }
        }

        const particles = Array(200).fill().map(() => new Particle());
        // Set one particle as the GitHub node
        const githubNode = particles[0];
        githubNode.isGithub = true;
        githubNode.radius = 3; // Make it slightly larger
        githubNode.z = 500; // Position it closer to the viewer

        let speed = 0;
        let targetSpeed = 0;
        const maxSpeed = 20;

        // Handle scroll
        let lastScrollTop = window.pageYOffset;
        window.addEventListener('scroll', () => {
            isScrolling = true;
            clearTimeout(scrollTimeout);
            
            const scrollTop = window.pageYOffset;
            const scrollDelta = scrollTop - lastScrollTop;
            targetSpeed = Math.max(-maxSpeed, Math.min(maxSpeed, scrollDelta));
            lastScrollTop = scrollTop;

            // Set timeout to detect when scrolling stops
            scrollTimeout = setTimeout(() => {
                isScrolling = false;
            }, 150);
        });

        // Handle clicks
        canvas.addEventListener('click', (event) => {
            const rect = canvas.getBoundingClientRect();
            const mouseX = event.clientX - rect.left;
            const mouseY = event.clientY - rect.top;

            particles.forEach(particle => {
                if (!particle.isGithub) return;

                const scale = 400 / particle.z;
                const x2d = particle.x * scale + canvas.width / 2;
                const y2d = particle.y * scale + canvas.height / 2;
                const r = particle.radius * scale * 2;

                const dx = mouseX - x2d;
                const dy = mouseY - y2d;
                if (dx * dx + dy * dy < r * r) {
                    window.open('https://github.com/enstn', '_blank');
                }
            });
        });

        // Make cursor pointer when hovering over GitHub node
        canvas.addEventListener('mousemove', (event) => {
            const rect = canvas.getBoundingClientRect();
            const mouseX = event.clientX - rect.left;
            const mouseY = event.clientY - rect.top;

            let isOverClickable = false;
            particles.forEach(particle => {
                if (!particle.isGithub) return;

                const scale = 400 / particle.z;
                const x2d = particle.x * scale + canvas.width / 2;
                const y2d = particle.y * scale + canvas.height / 2;
                const r = particle.radius * scale * 2;

                const dx = mouseX - x2d;
                const dy = mouseY - y2d;
                if (dx * dx + dy * dy < r * r) {
                    isOverClickable = true;
                }
            });

            canvas.style.cursor = isOverClickable ? 'pointer' : 'default';
        });

        function animate() {
            // Use different alpha for the background clear based on scroll state
            ctx.fillStyle = isScrolling ? 'rgba(0, 0, 0, 0.1)' : 'rgba(0, 0, 0, 1)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            speed += (targetSpeed - speed) * 0.1;
            targetSpeed *= 0.95;

            particles.forEach(particle => {
                particle.z -= speed;

                if (particle.z <= 1) {
                    particle.reset();
                    particle.z = 2000;
                } else if (particle.z > 2000) {
                    particle.reset();
                    particle.z = 1;
                }

                const scale = 400 / particle.z;
                const x2d = particle.x * scale + canvas.width / 2;
                const y2d = particle.y * scale + canvas.height / 2;

                const alpha = Math.min(1, (2000 - particle.z) / 1000);
                particle.draw(x2d, y2d, scale, alpha);

                particles.forEach(other => {
                    const dx = x2d - (other.x * 400 / other.z + canvas.width / 2);
                    const dy = y2d - (other.y * 400 / other.z + canvas.height / 2);
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    
                    if (distance < 100 && Math.abs(particle.z - other.z) < 200) {
                        ctx.beginPath();
                        ctx.strokeStyle = `rgba(255, 255, 255, ${alpha * 0.2})`;
                        ctx.lineWidth = Math.min(2, particle.radius * scale / 2);
                        ctx.moveTo(x2d, y2d);
                        ctx.lineTo(
                            other.x * 400 / other.z + canvas.width / 2,
                            other.y * 400 / other.z + canvas.height / 2
                        );
                        ctx.stroke();
                    }
                });
            });

            requestAnimationFrame(animate);
        }

        animate();
    </script>
</body>
</html>